--- a/drivers/net/wireless/wl/Makefile
+++ b/drivers/net/wireless/wl/Makefile
@@ -13,6 +13,7 @@
 #
 # $Id: Makefile_kbuild_portsrc,v 1.6.54.4 2011-01-27 00:55:34 Exp $
 
+API := CFG80211
 ifneq ($(KERNELRELEASE),)
 
   LINUXVER_GOODFOR_CFG80211:=$(strip $(shell \
@@ -120,7 +121,7 @@ EXTRA_CFLAGS       += -I$(src)/src/include
 EXTRA_CFLAGS       += -I$(src)/src/wl/sys -I$(src)/src/wl/phy
 #EXTRA_CFLAGS       += -DBCMDBG_ASSERT
 
-EXTRA_LDFLAGS      := $(src)/lib/wlc_hybrid.o_shipped
+EXTRA_LDFLAGS      := $(srctree)/$(src)/lib/wlc_hybrid.o_shipped
 
 all:
 	KBUILD_NOPEDANTIC=1 make -C /lib/modules/`uname -r`/build M=`pwd`
--- a/drivers/net/wireless/wl/src/include/bcmutils.h
+++ b/drivers/net/wireless/wl/src/include/bcmutils.h
@@ -555,7 +555,7 @@ extern void printbig(char *buf);
 extern void prhex(const char *msg, uchar *buf, uint len);
 
 extern bcm_tlv_t *BCMROMFN(bcm_next_tlv)(bcm_tlv_t *elt, int *buflen);
-extern bcm_tlv_t *BCMROMFN(bcm_parse_tlvs)(void *buf, int buflen, uint key);
+extern bcm_tlv_t *BCMROMFN(bcm_parse_tlvs)(const void *buf, int buflen, uint key);
 extern bcm_tlv_t *BCMROMFN(bcm_parse_ordered_tlvs)(void *buf, int buflen, uint key);
 
 extern const char *bcmerrorstr(int bcmerror);
--- a/drivers/net/wireless/wl/src/wl/sys/wl_cfg80211.c
+++ b/drivers/net/wireless/wl/src/wl/sys/wl_cfg80211.c
@@ -40,9 +40,9 @@ u32 wl_dbg_level = WL_DBG_ERR | WL_DBG_INFO;
 
 static s32 wl_cfg80211_change_iface(struct wiphy *wiphy, struct net_device *ndev,
            enum nl80211_iftype type, u32 *flags, struct vif_params *params);
-static s32 __wl_cfg80211_scan(struct wiphy *wiphy, struct net_device *ndev,
+static s32 __wl_cfg80211_scan(struct wiphy *wiphy,
            struct cfg80211_scan_request *request, struct cfg80211_ssid *this_ssid);
-static s32 wl_cfg80211_scan(struct wiphy *wiphy, struct net_device *ndev,
+static s32 wl_cfg80211_scan(struct wiphy *wiphy,
            struct cfg80211_scan_request *request);
 static s32 wl_cfg80211_set_wiphy_params(struct wiphy *wiphy, u32 changed);
 static s32 wl_cfg80211_join_ibss(struct wiphy *wiphy, struct net_device *dev,
@@ -55,16 +55,9 @@ static s32 wl_cfg80211_set_power_mgmt(struct wiphy *wiphy,
 static int wl_cfg80211_connect(struct wiphy *wiphy, struct net_device *dev,
            struct cfg80211_connect_params *sme);
 static s32 wl_cfg80211_disconnect(struct wiphy *wiphy, struct net_device *dev, u16 reason_code);
-
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
-static s32 wl_cfg80211_set_tx_power(struct wiphy *wiphy,
+static s32 wl_cfg80211_set_tx_power(struct wiphy *wiphy, struct wireless_dev *wdev,
            enum nl80211_tx_power_setting type, s32 dbm);
-#else
-static s32 wl_cfg80211_set_tx_power(struct wiphy *wiphy,
-           enum tx_power_setting type, s32 dbm);
-#endif
-
-static s32 wl_cfg80211_get_tx_power(struct wiphy *wiphy, s32 *dbm);
+static s32 wl_cfg80211_get_tx_power(struct wiphy *wiphy, struct wireless_dev *wdev, s32 *dbm);
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 38)
 static s32 wl_cfg80211_config_default_key(struct wiphy *wiphy,
@@ -496,11 +489,11 @@ wl_cfg80211_change_iface(struct wiphy *wiphy, struct net_device *ndev,
 }
 
 static s32
-__wl_cfg80211_scan(struct wiphy *wiphy, struct net_device *ndev,
+__wl_cfg80211_scan(struct wiphy *wiphy,
                    struct cfg80211_scan_request *request,
                    struct cfg80211_ssid *this_ssid)
 {
-	struct wl_priv *wl = ndev_to_wl(ndev);
+	struct wl_priv *wl = wiphy_to_wl(wiphy);
 	struct cfg80211_ssid *ssids;
 	struct wl_scan_req *sr = wl_to_sr(wl);
 	s32 passive_scan;
@@ -545,12 +538,12 @@ __wl_cfg80211_scan(struct wiphy *wiphy, struct net_device *ndev,
 	}
 	WL_DBG(("sr->ssid.SSID_len (%d)\n", sr->ssid.SSID_len));
 	passive_scan = wl->active_scan ? 0 : 1;
-	err = wl_dev_ioctl(ndev, WLC_SET_PASSIVE_SCAN, &passive_scan, sizeof(passive_scan));
+	err = wl_dev_ioctl(request->wdev->netdev, WLC_SET_PASSIVE_SCAN, &passive_scan, sizeof(passive_scan));
 	if (err) {
 		WL_ERR(("WLC_SET_PASSIVE_SCAN error (%d)\n", err));
 		goto scan_out;
 	}
-	err = wl_dev_ioctl(ndev, WLC_SCAN, &sr->ssid, sizeof(sr->ssid));
+	err = wl_dev_ioctl(request->wdev->netdev, WLC_SCAN, &sr->ssid, sizeof(sr->ssid));
 	if (err) {
 		if (err == -EBUSY) {
 			WL_INF(("system busy : scan for \"%s\" "
@@ -570,13 +563,13 @@ scan_out:
 }
 
 static s32
-wl_cfg80211_scan(struct wiphy *wiphy, struct net_device *ndev,
+wl_cfg80211_scan(struct wiphy *wiphy,
                  struct cfg80211_scan_request *request)
 {
 	s32 err = 0;
 
 	CHECK_SYS_UP();
-	err = __wl_cfg80211_scan(wiphy, ndev, request, NULL);
+	err = __wl_cfg80211_scan(wiphy, request, NULL);
 	if (err) {
 		WL_DBG(("scan error (%d)\n", err));
 		return err;
@@ -742,7 +735,7 @@ wl_cfg80211_join_ibss(struct wiphy *wiphy, struct net_device *dev,
 	else
 		memset(&join_params.params.bssid, 0, ETHER_ADDR_LEN);
 
-	wl_ch_to_chanspec(params->channel, &join_params, &join_params_size);
+	wl_ch_to_chanspec(params->chandef.chan, &join_params, &join_params_size);
 
 	err = wl_dev_ioctl(dev, WLC_SET_SSID, &join_params, join_params_size);
 	if (err) {
@@ -1099,16 +1092,8 @@ wl_cfg80211_disconnect(struct wiphy *wiphy, struct net_device *dev, u16 reason_c
 	return err;
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 36)
-static s32
-wl_cfg80211_set_tx_power(struct wiphy *wiphy, enum nl80211_tx_power_setting type, s32 dbm)
-#else
-#define NL80211_TX_POWER_AUTOMATIC TX_POWER_AUTOMATIC
-#define NL80211_TX_POWER_LIMITED TX_POWER_LIMITED
-#define NL80211_TX_POWER_FIXED TX_POWER_FIXED
-static s32
-wl_cfg80211_set_tx_power(struct wiphy *wiphy, enum tx_power_setting type, s32 dbm)
-#endif
+static s32 wl_cfg80211_set_tx_power(struct wiphy *wiphy, struct wireless_dev *wdev,
+				    enum nl80211_tx_power_setting type, s32 dbm)
 {
 
 	struct wl_priv *wl = wiphy_to_wl(wiphy);
@@ -1158,7 +1143,7 @@ wl_cfg80211_set_tx_power(struct wiphy *wiphy, enum tx_power_setting type, s32 db
 	return err;
 }
 
-static s32 wl_cfg80211_get_tx_power(struct wiphy *wiphy, s32 *dbm)
+static s32 wl_cfg80211_get_tx_power(struct wiphy *wiphy, struct wireless_dev *wdev, s32 *dbm)
 {
 	struct wl_priv *wl = wiphy_to_wl(wiphy);
 	struct net_device *ndev = wl_to_ndev(wl);
@@ -1466,7 +1451,10 @@ wl_cfg80211_get_station(struct wiphy *wiphy, struct net_device *dev,
 		scb_val.val = 0;
 		err = wl_dev_ioctl(dev, WLC_GET_RSSI, &scb_val, sizeof(scb_val_t));
 		if (err) {
-			WL_ERR(("Could not get rssi (%d)\n", err));
+			if (err != -EINVAL) {
+				// Don't fill syslog with EINVAL error
+				WL_ERR(("Could not get rssi (%d)\n", err));
+			}
 			return err;
 		}
 		rssi = dtoh32(scb_val.val);
@@ -2043,7 +2031,7 @@ static s32 wl_update_bss_info(struct wl_priv *wl)
 	u16 beacon_interval;
 	s32 dtim_period;
 	size_t ie_len;
-	u8 *ie;
+	const u8 *ie;
 	s32 err = 0;
 
 	ssid = &wl->profile->ssid;
@@ -2074,10 +2062,10 @@ static s32 wl_update_bss_info(struct wl_priv *wl)
 		beacon_interval = cpu_to_le16(bi->beacon_period);
 	} else {
 		WL_DBG(("Found the AP in the list - BSSID %pM\n", bss->bssid));
-		ie = bss->information_elements;
-		ie_len = bss->len_information_elements;
+		ie = bss->ies->data;
+		ie_len = bss->ies->len;
 		beacon_interval = bss->beacon_interval;
-		cfg80211_put_bss(bss);
+		cfg80211_put_bss(wl_to_wiphy(wl), bss);
 	}
 
 	tim = bcm_parse_tlvs(ie, ie_len, WLAN_EID_TIM);
--- a/drivers/net/wireless/wl/src/wl/sys/wl_iw.h
+++ b/drivers/net/wireless/wl/src/wl/sys/wl_iw.h
@@ -16,6 +16,7 @@
 #define _wl_iw_h_
 
 #include <linux/wireless.h>
+#include <linux/semaphore.h>
 
 #include <typedefs.h>
 #include <proto/ethernet.h>
--- a/drivers/net/wireless/wl/src/wl/sys/wl_linux.c
+++ b/drivers/net/wireless/wl/src/wl/sys/wl_linux.c
@@ -40,7 +40,7 @@
 #include <linux/pci_ids.h>
 #define WLC_MAXBSSCFG		1	
 
-#include <asm/system.h>
+#include <asm/switch_to.h>
 #include <asm/io.h>
 #include <asm/irq.h>
 #include <asm/pgtable.h>
@@ -256,7 +256,7 @@ module_param(nompc, int, 0);
 #define quote_str(s) to_str(s)
 
 #ifndef BRCM_WLAN_IFNAME
-#define BRCM_WLAN_IFNAME eth%d
+#define BRCM_WLAN_IFNAME wlan%d
 #endif
 
 static char name[IFNAMSIZ] = quote_str(BRCM_WLAN_IFNAME);
@@ -385,7 +385,7 @@ static const struct net_device_ops wl_netdev_ops =
 #endif
 	.ndo_get_stats = wl_get_stats,
 	.ndo_set_mac_address = wl_set_mac_address,
-	.ndo_set_multicast_list = wl_set_multicast_list,
+	.ndo_set_rx_mode = wl_set_multicast_list,
 	.ndo_do_ioctl = wl_ioctl
 };
 
@@ -1579,11 +1579,7 @@ wl_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 	}
 
 	WL_LOCK(wl);
-	if (!capable(CAP_NET_ADMIN)) {
-		bcmerror = BCME_EPERM;
-	} else {
-		bcmerror = wlc_ioctl(wl->wlc, ioc.cmd, buf, ioc.len, wlif->wlcif);
-	}
+	bcmerror = wlc_ioctl(wl->wlc, ioc.cmd, buf, ioc.len, wlif->wlcif);
 	WL_UNLOCK(wl);
 
 done1:
